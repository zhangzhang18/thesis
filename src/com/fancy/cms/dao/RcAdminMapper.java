package com.fancy.cms.dao;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.fancy.cms.model.RcAdmin;
import com.fancy.cms.model.RcAdminExample;
import com.fancy.cms.model.Students;
import com.fancy.cms.model.Teachers;

public interface RcAdminMapper {

	List<RcAdmin> getUserList(@Param("map") Map<String, Object> map);

	void addUser(@Param("admin") RcAdmin admin);

	void deleteUserById(@Param("userId") String[] userId);

	RcAdmin getUserById(@Param("userId") String userId);

	void updateUser(@Param("admin") RcAdmin admin);

	int countByExample(RcAdminExample example);

	int deleteByExample(RcAdminExample example);

	int deleteByPrimaryKey(Integer id);

	int getCount();

	int getCountForContacts(@Param("contactIds") List<Integer> contactIds);

	List<RcAdmin> getList();

	List<RcAdmin> getPage(@Param("begin") int begin, @Param("end") int end);

	List<RcAdmin> getPageForContacts(@Param("begin") int begin,
			@Param("end") int end, @Param("contactIds") List<Integer> contactIds);

	/**
	 * @DESC 根据用户名查询用户信息
	 * @param userName
	 * @return
	 */
	RcAdmin getRcAdminByUsername(String userName);

	int insert(RcAdmin record);

	int insertSelective(RcAdmin record);

	List<RcAdmin> selectByExample(RcAdminExample example);

	RcAdmin selectByPrimaryKey(Integer id);

	int updateByExample(@Param("record") RcAdmin record,
			@Param("example") RcAdminExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table rc_admin
	 * 
	 * @mbggenerated
	 */
	int updateByExampleSelective(@Param("record") RcAdmin record,
			@Param("example") RcAdminExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table rc_admin
	 * 
	 * @mbggenerated
	 */
	int updateByPrimaryKey(RcAdmin record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table rc_admin
	 * 
	 * @mbggenerated
	 */
	int updateByPrimaryKeySelective(RcAdmin record);

	List<RcAdmin> getListOrderbyLevel();

	List<RcAdmin> getListByDepts(@Param("deptIds") String[] deptIds);

	List<RcAdmin> getListByIds(@Param("userIds") String[] userIds);

	List<RcAdmin> getListByNames(@Param("userNames") String[] userNames);

	List<RcAdmin> getListByDeptId(@Param("deptId") Integer deptId);

	List<RcAdmin> getUserByDeptIds(@Param("deptIds") String[] deptIds);

	int checkPapers(@Param("papers") String papers);

	int checkPapersByEditId(@Param("userid") String userid,
			@Param("papers") String papers);

	RcAdmin getPasswdByPapers(@Param("papers") String papers);

	List<RcAdmin> getListByProfessions(
			@Param("professionsId") String professionsId);

	List<Integer> getDeptIdByUserId(@Param("userID") String[] userID);

	List<RcAdmin> getAdminList();

	int addAdmin(RcAdmin rcAdmin);

	RcAdmin getAdminById(Integer id);

	int updateRcAdmin(RcAdmin rcAdmin);

	void deRcAdminById(String id);

	List<RcAdmin> getAdminListByDeptId(@Param("deptId") String deptId);

	RcAdmin getAdminName(String checkIdList);

	List<RcAdmin> getAdminByIds(@Param("ids") String ids);

	Integer getRolebyName(String name);

	String getpwdByPapers(String papers);

	Students selectByName(String userName);

	void updatebystuname(RcAdmin rcAdmin);

	RcAdmin getAdminByName(String stuname);

	List<RcAdmin> selectadmin();

	List<Teachers> getPage(@Param("begin") int begin, @Param("end") int end,
			@Param("papers") String papers);

	int getCount(@Param("papers") String papers);

	void fromXls2(List<RcAdmin> rcAdmins);

}